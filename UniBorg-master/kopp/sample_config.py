# PLEASE STOP!
# DO NOT EDIT THIS FILE
import os


class Config:
    LOGGER = bool(os.environ.get("LOGGER", False))
    # Get this value from my.telegram.org! Please do not steal
    APP_ID = int(os.environ.get("APP_ID", 6))
    API_HASH = os.environ.get("API_HASH", "eb06d4abfb49dc3eeb1aeb98ae0f581e")
    #
    TELE_GRAM_2FA_CODE = os.environ.get("TELE_GRAM_2FA_CODE", None)
    # Telegram BOT Token from @BotFather
    TG_BOT_TOKEN_BF_HER = os.environ.get("TG_BOT_TOKEN_BF_HER", None)
    TG_BOT_USER_NAME_BF_HER = os.environ.get("TG_BOT_USER_NAME_BF_HER", None)
    # For Databases
    # DataBase would not work
    DB_URI = os.environ.get("DATABASE_URL", None)
    # string session for running on Heroku
    # some people upload their session files on GitHub or other third party hosting
    # websites, this might prevent the un-authorized use of the
    # confidential session files
    HU_STRING_SESSION = os.environ.get("HU_STRING_SESSION", None)
    # specify command handler that should be used for the plugins
    # this should be a valid "regex" pattern
    COMMAND_HAND_LER = os.environ.get("COMMAND_HAND_LER", "\.")
    # Get your own APPID from https://api.openweathermap.org/data/2.5/weather
    OPEN_WEATHER_MAP_APPID = os.environ.get("OPEN_WEATHER_MAP_APPID", None)
    # Get a Free API Key from OCR.Space
    OCR_SPACE_API_KEY = os.environ.get("OCR_SPACE_API_KEY", None)
    # Get your own API key from https://www.remove.bg/ or
    # feel free to use http://telegram.dog/Remove_BGBot
    REM_BG_API_KEY = os.environ.get("REM_BG_API_KEY", None)
    # Send .get_id in any group to fill this value.
    PRIVATE_GROUP_BOT_API_ID = os.environ.get("PRIVATE_GROUP_BOT_API_ID", None)
    if PRIVATE_GROUP_BOT_API_ID:
        PRIVATE_GROUP_BOT_API_ID = int(PRIVATE_GROUP_BOT_API_ID)
    # Send .get_id in any channel to fill this value. ReQuired for @Manuel15 inspiration to work!
    PRIVATE_CHANNEL_BOT_API_ID = os.environ.get(
        "PRIVATE_CHANNEL_BOT_API_ID",
        None
    )
    if PRIVATE_CHANNEL_BOT_API_ID:
        PRIVATE_CHANNEL_BOT_API_ID = int(PRIVATE_CHANNEL_BOT_API_ID)
    # Send .get_id in any group with all your administration bots (added)
    G_BAN_LOGGER_GROUP = os.environ.get("G_BAN_LOGGER_GROUP", None)
    if G_BAN_LOGGER_GROUP:
        G_BAN_LOGGER_GROUP = int(G_BAN_LOGGER_GROUP)
    # This is required for the plugins involving the file system.
    TMP_DOWNLOAD_DIRECTORY = os.environ.get(
        "TMP_DOWNLOAD_DIRECTORY",
        "./DOWNLOADS/"
    )
    # This is required for the hash to torrent file functionality to work.
    HASH_TO_TORRENT_API = os.environ.get(
        "HASH_TO_TORRENT_API",
        "https://example.com/torrent/{}"
    )
    # for video trimming and screenshot plugins
    LT_QOAN_NOE_FF_MPEG_CTD = os.environ.get(
        "LT_QOAN_NOE_FF_MPEG_CTD",
        None
    )
    LT_QOAN_NOE_FF_MPEG_URL = os.environ.get(
        "LT_QOAN_NOE_FF_MPEG_URL",
        None
    )
    #
    STICKERS_PNG_SHORT_NAME = os.environ.get(
        "STICKERS_PNG_SHORT_NAME",
        "Uni_Borg_7351948"
    )
    STICKERS_TGS_SHORT_NAME = os.environ.get(
        "STICKERS_TGS_SHORT_NAME",
        "Uni_Borg_7351948_as"
    )
    # This is required for the @telegraph functionality.
    TELEGRAPH_SHORT_NAME = os.environ.get(
        "TELEGRAPH_SHORT_NAME",
        "UniBorg"
    )
    # JustWatch Country
    WATCH_COUNTRY = os.environ.get("WATCH_COUNTRY","IN")
    # set blacklist_chats where you do not want userbot's features
    UB_BLACK_LIST_CHAT = {int(x) for x in os.environ.get(
            "UB_BLACK_LIST_CHAT",
            ""
        ).split()
    }
    # specify list of users allowed to use bot
    # WARNING: be careful who you grant access to your bot.
    # malicious users could do ".exec rm -rf /*"
    SUDO_USERS = list(
        {
            int(x) for x in os.environ.get(
                "SUDO_USERS", ""
            ).split()
        }
    )
    # Google Drive ()
    G_DRIVE_CLIENT_ID = os.environ.get("G_DRIVE_CLIENT_ID", None)
    G_DRIVE_CLIENT_SECRET = os.environ.get("G_DRIVE_CLIENT_SECRET", None)
    G_DRIVE_AUTH_TOKEN_DATA = os.environ.get("G_DRIVE_AUTH_TOKEN_DATA", None)
    # Google Photos ()
    G_PHOTOS_CLIENT_ID = os.environ.get("G_PHOTOS_CLIENT_ID", None)
    G_PHOTOS_CLIENT_SECRET = os.environ.get("G_PHOTOS_CLIENT_SECRET", None)
    G_PHOTOS_AUTH_TOKEN_ID = os.environ.get("G_PHOTOS_AUTH_TOKEN_ID", None)
    if G_PHOTOS_AUTH_TOKEN_ID:
        G_PHOTOS_AUTH_TOKEN_ID = int(G_PHOTOS_AUTH_TOKEN_ID)
    # Google Chrome Selenium Stuff
    # taken from https://github.com/jaskaranSM/UniBorg/blob/9072e3580cc6c98d46f30e41edbe73ffc9d850d3/sample_config.py#L104-L106
    GOOGLE_CHROME_DRIVER = os.environ.get("GOOGLE_CHROME_DRIVER", None)
    GOOGLE_CHROME_BIN = os.environ.get("GOOGLE_CHROME_BIN", None)
    # for @DMCATelegramBot plugin(s)
    DEL_SLEEP_TIMEOUT = int(os.environ.get(
        "DEL_SLEEP_TIMEOUT",
        "31"
    ))
    DMCA_TG_REPLY_MESSAGE = os.environ.get(
        "DMCA_TG_REPLY_MESSAGE",
        (
            "Respected Sir / Ma'am, \n\n"
            "I have removed the contents and "
            "requesting you to remove the "
            "restriction_reason from the "
            "affected channels.\n\n"
            "<a href='https://t.me/c/1224259012/31'>¬©Ô∏èRED!Tüí≤</a>"
        )
    )
    # number of rows of buttons to be displayed in .helpme command
    NO_OF_BUTTONS_DISPLAYED_IN_H_ME_CMD = int(os.environ.get(
        "NO_OF_BUTTONS_DISPLAYED_IN_H_ME_CMD", 5
    ))
    #
    GROUP_REG_SED_EX_BOT_S = os.environ.get(
        "GROUP_REG_SED_EX_BOT_S",
        r"(rege?(e)x|moku|BananaButler_|rgx|l4mR|Telethonian|pcre)bot"
    )
    # TG API limit. An album can have atmost 10 media!
    TG_GLOBAL_ALBUM_LIMIT = int(os.environ.get("TG_GLOBAL_ALBUM_LIMIT", 9))
    #
    #
    # DO NOT EDIT BELOW THIS LINE IF YOU DO NOT KNOW WHAT YOU ARE DOING
    # TG API limit. A message can have maximum 4096 characters!
    MAX_MESSAGE_SIZE_LIMIT = int(
        os.environ.get(
            "MAX_MESSAGE_SIZE_LIMIT",
            "4095"
        )
    )
    # specify LOAD and NO_LOAD
    LOAD = []
    # folowing plugins won't work on Heroku,
    # because of their ephemeral file system
    NO_LOAD = [
        # "aria_two",
        "screencapture",
        "deleted_messages_watcher",
        "f_notification_p"
    ]
    # leave this blank, should be automatically filled for Heroku.com users
    # define the "types" that should be uplaoded as streamable
    TL_VID_STREAM_TYPES = ("MP4", "WEBM")
    TL_MUS_STREAM_TYPES = ("MP3", "WAV", "FLAC")
    TL_FF_NOAQ_TYPES = ("WEBP")
    # to prevent IP-bans by popular scarpping sources
    PROXY_WORKER_S = os.environ.get("PROXY_WORKER_S")
    # get this value from @UseTGBot /getapi command
    USE_TG_BOT_APP_ID = os.environ.get("USE_TG_BOT_APP_ID")
    # for the file converter plugin(s)
    NFC_TITLE = os.environ.get("NFC_TITLE")
    NFC_PERFORMER = os.environ.get("NFC_PERFORMER")
    # for the IMDb API
    # get your API URLs from https://github.com/SpEcHiDe/IMDbOT
    IMDB_API_ONE_URL = os.environ.get("IMDB_API_ONE_URL")
    IMDB_API_TWO_URL = os.environ.get("IMDB_API_TWO_URL")
    # to fix #Telegram #Failures :(\
    SROSTERVECK = os.environ.get("SROSTERVECK", False)
